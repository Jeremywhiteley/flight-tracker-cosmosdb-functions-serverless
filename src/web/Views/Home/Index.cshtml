@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome to Flight Tracker</h1>
    <p>Serverless solution showing how flights can be tracked using Azure Cosmos DB, Functions and SignalR.</p>
    <p>Learn about it at the <a href="https://github.com/stuartleaver/flight-tracker-cosmosdb-functions-serverless" target="new">GitHub repository</a>.</p>
    <p>Zooming in and out, but staying on the UK can sometimes show a different amount of flights. Mouse over and clicking on a flight will display more details.</p>
</div>

<div id="flightMap"></div>

<script type="text/javascript">
    // Set the base Url for the Azure Functions
    var baseUrl = @Html.Raw("'" + @Configuration["FunctionsBaseUrl"] + "'")

    // Set the colour of the images to use
    var imageSpriteColour = @Html.Raw("'" + @Configuration["ImageSpriteColour"] + "'")

    //Create an instance of the map control and set some options.
    var map = new atlas.Map('flightMap', {
        center: [-4.2119, 54.521],
        zoom: 5.5,
        language: 'en-US',
        authOptions: {
            authType: 'subscriptionKey',
            subscriptionKey: @Html.Raw("'" + @Configuration["MapsPrimaryKey"] + "'")
        }
    });

    //Define an HTML template for a custom popup content laypout.
    var popupTemplate = '<div class="flightInfobox">\
        <div class="callsign">Callsign: {callsign}</div>\
        <div>Origin: {origin}</div>\
        <div>Long: {longitude}, Lat: {latitude}</div>\
        <div>Altitude: {altitude}</div>\
        <div>Velocity: {velocity}</div>\
        <div>Rotation: <img src="../images/' + imageSpriteColour + '/{rotationImage}"></div>\
        <div>Squawk: {squawk}</div>\
        </div>';

    //Define a HTML template for the callsign popup content layout.
    var callsignPopupTemplate = '<div class="flightInfobox"><div class="callsign">Callsign: {callsign}</div></div>'

    let datasource;
    let flights = [];

    //Wait until the map resources are ready.
    map.events.add('ready', function () {
        //Load the custom image icon into the map resources.
        map.imageSprite.add('airplane', '../images/' + imageSpriteColour + '/airplane-128.png').then(function () {
            //Create a data source and add it to the map.
            datasource = new atlas.source.DataSource();
            map.sources.add(datasource);

            //Add a layer for rendering point data as symbols.
            var symbolLayer = new atlas.layer.SymbolLayer(datasource, null, {
                iconOptions: {
                    //Pass in the id of the custom icon that was loaded into the map resources.
                    image: 'airplane',

                    //Optionally scale the size of the icon.
                    size: 0.3
                }
            });
            map.layers.add(symbolLayer);

            //Create a popup but leave it closed so we can update it and display it later.
            popup = new atlas.Popup({
                pixelOffset: [0, -18]
            });

            //Create a popup that will display the callsign on mouseover
            callsignPopup = new atlas.Popup({
                pixelOffset: [0, -18],
                closeButton: false
            })

            //Add a click event to the symbol layer.
            map.events.add('click', symbolLayer, symbolClicked);

            //Add a hover event to the symbol layer.
            map.events.add('mouseover', symbolLayer, function (e) {
                //Make sure that the point exists.
                if (e.shapes && e.shapes.length > 0) {
                    var content, coordinate;
                    var properties = e.shapes[0].getProperties();
                    content = callsignPopupTemplate.replace(/{callsign}/g, properties.callsign);
                    coordinate = e.shapes[0].getCoordinates();

                    callsignPopup.setOptions({
                        //Update the content of the popup.
                        content: content,

                        //Update the popup's position with the symbol's coordinate.
                        position: coordinate
                    });
                    
                    //Open the popup.
                    callsignPopup.open(map);
                }
            });

            map.events.add('mouseleave', symbolLayer, function (){
                callsignPopup.close();
            });
            
            getConnectionInfo().then(info => {
                // make compatible with old and new SignalRConnectionInfo
                info.accessToken = info.accessToken || info.accessKey;
                info.url = info.url || info.endpoint;

                const options = {
                    accessTokenFactory: () => {
                        if (info.accessToken) {
                            return info.accessToken
                        } else {
                            return getConnectionInfo().then(info => {
                                return info.accessToken
                            })
                        }
                    }
                }

                const connection = new signalR.HubConnectionBuilder()
                    .withUrl(info.url, options)
                    .configureLogging(signalR.LogLevel.Information)
                    .build()
                    
                startConnection(connection)

                connection.on('newFlightData', processFlightData)

                connection.onclose(() => {
                    console.log('disconnected')
                    setTimeout(function () { startConnection(connection) }, 5000)
                })
            }).catch(console.error)

            function getConnectionInfo() {
                return axios.get(baseUrl + '/api/negotiate')
                    .then(response => { return response.data })
                    .catch(console.error)
            }

            function startConnection(connection) {
                console.log('connecting...')
                connection.start()
                    .then(() => { console.log('connected!') })
                    .catch(error => {
                        console.error(error)
                        setTimeout(() => { startConnection(connection) }, 2000)
                    })
            }
            
            function processFlightData(flight) {
                var pin = new atlas.Shape(new atlas.data.Point([flight.Longitude, flight.Latitude]), flight.id); 
 
                pin.addProperty('callsign', flight.Callsign); 
                pin.addProperty('origin', flight.OriginCountry); 
                pin.addProperty('longitude', flight.Longitude); 
                pin.addProperty('latitude', flight.Latitude); 
                pin.addProperty('altitude', flight.Altitude); 
                pin.addProperty('velocity', flight.Velocity); 
                pin.addProperty('rotation', flight.VerticalRate); 
                pin.addProperty('squawk', flight.Squawk); 

                flights[flight.id] = pin;

                datasource.setShapes(Object.values(flights));
            }

            function symbolClicked(e) {
                //Make sure the event occured on a point feature.
                if (e.shapes && e.shapes.length > 0) {
                    var content, coordinate;

                    //Check to see if the first value in the shapes array is a Point Shape.
                    if (e.shapes[0] instanceof atlas.Shape && e.shapes[0].getType() === 'Point') {
                        var properties = e.shapes[0].getProperties();

                        //Check to see what image needs to be used based on rotation
                        var rotationImage
                        if (properties.rotation == 0 || properties.rotation == null) {
                            rotationImage = 'airplane-32.png'
                        } else if (properties.rotation > 0) {
                            rotationImage = 'airplane-ascent-32.png'
                        } else if (properties.rotation < 0) {
                            rotationImage = 'airplane-descent-32.png'
                        }

                        content = popupTemplate.replace(/{callsign}/g, properties.callsign).replace(/{origin}/g, properties.origin).replace(/{longitude}/g, properties.longitude).replace(/{latitude}/g, properties.latitude).replace(/{altitude}/g, properties.altitude).replace(/{velocity}/g, properties.velocity).replace(/{rotationImage}/g, rotationImage).replace(/{squawk}/g, properties.squawk);
                        coordinate = e.shapes[0].getCoordinates();
                    } else if (e.shapes[0].type === 'Feature' && e.shapes[0].geometry.type === 'Point') {
                        //Check to see if the feature is a cluster.
                        if (e.shapes[0].properties.cluster) {
                            content = '<div style="padding:10px;">Cluster of ' + e.shapes[0].properties.point_count + ' symbols</div>';
                        } else {
                            //Feature is likely from a VectorTileSource.
                            content = popupTemplate.replace(/{callsign}/g, properties.callsign).replace(/{origin}/g, properties.origin).replace(/{longitude}/g, properties.longitude).replace(/{latitude}/g, properties.latitude).replace(/{altitude}/g, properties.altitude).replace(/{velocity}/g, properties.velocity).replace(/{rotationImage}/g, rotationImage).replace(/{squawk}/g, properties.squawk);
                        }
            
                        coordinate = e.shapes[0].geometry.coordinates;
                    }
        
                    if (content && coordinate) {
                        //Populate the popupTemplate with data from the clicked point feature.
                        popup.setOptions({
                            //Update the content of the popup.
                            content: content,
                
                            //Update the position of the popup with the symbols coordinate.
                            position: coordinate
                        });
            
                        //Open the popup.
                        popup.open(map);
                    }
                }
            }
        });
    });
</script>